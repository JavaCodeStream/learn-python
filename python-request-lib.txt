https://realpython.com/python-requests/

The requests library is the de facto standard for making HTTP requests in Python. It abstracts the complexities of making requests behind a beautiful, simple API so that you can focus on interacting with services and consuming data in your application.

Let’s begin by installing the requests library. To do so, run the following command:

$ pip install requests

Importing requests looks like this:

import requests

Play-arround with requests library
----------------------------------------------------------------
httpbin.org is a great resource.

It’s a service that accepts test requests and responds with data about the requests. For instance, you can use it to inspect a basic POST request:

>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})
>>> json_response = response.json()
>>> json_response['data']
'{"key": "value"}'
>>> json_response['headers']['Content-Type']
'application/json'


The GET Request
==================================================================
requests.get('https://api.github.com')
<Response [200]>

The Response
==================================================================
response = requests.get('https://api.github.com')

you’ve captured the return value of get(), which is an instance of Response
 
Status Codes. .status_code
------------------------------
response.status_code

if response.status_code == 200:
    print('Success!')
elif response.status_code == 404:
    print('Not Found.')
	
- If you use a Response instance in a conditional expression, it will evaluate to True if the status code was between 200 and 400, and False otherwise.

if response:
    print('Success!')
else:
    print('An error has occurred.')
	
NOTE: This Truth Value Test is made possible because __bool__() is an overloaded method on Response.

.raise_for_status()
----------------------
if we don’t want to check the response’s status code in an if statement. Instead, you want to raise an exception if the request was unsuccessful. 

import requests
from requests.exceptions import HTTPError

for url in ['https://api.github.com', 'https://api.github.com/invalid']:
    try:
        response = requests.get(url)

        # If the response was successful, no Exception will be raised
        response.raise_for_status()
    except HTTPError as http_err:
        print(f'HTTP error occurred: {http_err}')  # Python 3.6
    except Exception as err:
        print(f'Other error occurred: {err}')  # Python 3.6
    else:
        print('Success!')

If you invoke .raise_for_status(), an HTTPError will be raised for certain status codes. If the status code indicates a successful request, the program will proceed without that exception being raised.

Read the Content (.content attr)
==================================================================
>>> response = requests.get('https://api.github.com')
>>> response.content

.content gives you access to the raw bytes of the response payload, you will often want to convert them into a string using a character encoding such as UTF-8. response will do that for you when you access .text:


- .text to to convert the response content into a string using a character encoding such as UTF-8

>>> response.text

- .encoding before accessing .text to set the encoding scheme
Because the decoding of bytes to a str requires an encoding scheme, requests will try to guess the encoding based on the response’s headers if you do not specify one. You can provide an explicit encoding by setting .encoding before accessing .text:

>>> response.encoding = 'utf-8' # Optional: requests infers this internally
>>> response.text

.json() method
-----------------------------------------------------------------
- any serialized JSON content. To get a dictionary, you could take the str you retrieved from .text and deserialize it using json.loads(). However, a simpler way to accomplish this task is to use .json():

- The type of the return value of .json() is a dictionary, so you can access values in the object by key.

>>> response.json()

{'current_user_url': 'https://api.github.com/user',
 'current_user_authorizations_html_url': 'https://github.com/settings/connections/applications{/client_id}',
 'authorizations_url': 'https://api.github.com/authorizations',
 
 ...
 
 ..
}

Headers
==================================================================
The response headers can give you useful information, such as the content type of the response payload and a time limit on how long to cache the response. 

response.headers

{'date': 'Mon, 15 Jun 2020 01:29:54 GMT', 'content-type': 'application/json; charset=utf-8', 'server': 'GitHub.com', 'status': '200 OK', 'cache-control': 'public, max-age=60, s-maxage=60', 'vary': 'Accept, Accept-Encoding, Accept, X-Requested-With, Accept-Encoding', 'etag': 'W/"c6bac8870a7f94b08b440c3d5873c9ca"', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': "default-src 'none'", 'content-encoding': 'gzip', 'X-Ratelimit-Limit': '60', 'X-Ratelimit-Remaining': '58', 'X-Ratelimit-Reset': '1592187835', 'Accept-Ranges': 'bytes', 'Content-Length': '496', 'X-GitHub-Request-Id': '248F:71C5:8133A8:A7F847:5EE6CF12'}


- .headers returns a dictionary-like object, allowing you to access header values by key

>>> response.headers['Content-Type']
'application/json; charset=utf-8'

- *** There is something special about this dictionary-like headers object, though. The HTTP spec defines headers to be case-insensitive, which means we are able to access these headers without worrying about their capitalization:

>>> response.headers['content-type']
'application/json; charset=utf-8'

Query String Parameters using requests.get()
==================================================================
pass values through query string parameters in the URL. To do this using get(), you pass data to params. 

- For example, you can use GitHub’s Search API to look for the requests library

import requests

# Search GitHub's repositories for requests
response = requests.get(
    url = 'https://api.github.com/search/repositories',
    params = {'q': 'requests+language:python'},
)

# Inspect some attributes of the `requests` repository
json_response = response.json()
repository = json_response['items'][0]
print(f'Repository name: {repository["name"]}')
print(f'Repository description: {repository["description"]}')  # Python 3.6+


- You can pass params to get() in the form of a dictionary, as you have just done, or as a list of tuples:

>>> requests.get(
...     url = 'https://api.github.com/search/repositories',
...     params = [('q', 'requests+language:python')],
... )
<Response [200]>

- You can even pass the values as bytes:

>>> requests.get(
...     url = 'https://api.github.com/search/repositories',
...     params = b'q=requests+language:python',
... )
<Response [200]>


Request Headers
==================================================================
To customize headers, you pass a dictionary of HTTP headers to get() using the headers parameter.

ex: headers={'Accept': 'application/vnd.github.v3.text-match+json'},

import requests

response = requests.get(
    'https://api.github.com/search/repositories',
    params={'q': 'requests+language:python'},
    headers={'Accept': 'application/vnd.github.v3.text-match+json'},
)

# View the new `text-matches` array which provides information
# about your search term within the results
json_response = response.json()
repository = json_response['items'][0]
print(f'Text matches: {repository["text_matches"]}')


The Accept header tells the server what content types your application can handle. In this case, since you’re expecting the matching search terms to be highlighted, you’re using the header value application/vnd.github.v3.text-match+json, which is a proprietary GitHub Accept header where the content is a special JSON format.


Other HTTP Methods
==================================================================
>>> requests.put('https://httpbin.org/put', data={'key':'value'})
>>> requests.delete('https://httpbin.org/delete')
>>> requests.head('https://httpbin.org/get')
>>> requests.patch('https://httpbin.org/patch', data={'key':'value'})
>>> requests.options('https://httpbin.org/get')



>>> response.headers['Content-Type']
'application/json'

>>> response = requests.delete('https://httpbin.org/delete')
>>> json_response = response.json()
>>> json_response['args']
{}


The Message Body
==================================================================
Using requests, you’ll pass the payload to the corresponding function’s data parameter.

data takes a dictionary, a list of tuples, bytes, or a file-like object. You’ll want to adapt the data you send in the body of your request to the specific needs of the service you’re interacting with.

For example, if your request’s content type is application/x-www-form-urlencoded, you can send the form data as a dictionary:

>>> requests.post('https://httpbin.org/post', data={'key':'value'})
<Response [200]>

You can also send that same data as a list of tuples:

>>> requests.post('https://httpbin.org/post', data=[('key', 'value')])
<Response [200]>


If, however, you need to send JSON data, you can use the json parameter. When you pass JSON data via json, requests will serialize your data and add the correct Content-Type header for you.

>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})
>>> json_response = response.json()
>>> json_response['data']
'{"key": "value"}'
>>> json_response['headers']['Content-Type']
'application/json'


Inspecting Your Request
==================================================================
When you make a request, the requests library prepares the request before actually sending it to the destination server. Request preparation includes things like validating headers and serializing JSON content.

You can view the PreparedRequest by accessing .request on response object

>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})
>>> response.request.headers['Content-Type']
'application/json'
>>> response.request.url
'https://httpbin.org/post'
>>> response.request.body
b'{"key": "value"}'


Performance
=================================================================
When using requests, especially in a production application environment, it’s important to consider performance implications. Features like timeout control, sessions, and retry limits

Timeouts
-----------------------------------------------------------------
When you make an inline request to an external service, your system will need to wait upon the response before moving on. If your application waits too long for that response, requests to your service could back up, your user experience could suffer, or your background jobs could hang.


By default, requests will wait indefinitely on the response, so you should almost always specify a timeout duration to prevent these things from happening. To set the request’s timeout, use the timeout parameter. timeout can be an integer or float representing the number of seconds to wait on a response before timing out:

>>> requests.get('https://api.github.com', timeout=1)
<Response [200]>
>>> requests.get('https://api.github.com', timeout=3.05)
<Response [200]>


connect timeout & read timeout
-----------------------------------------------------------------
You can also pass a tuple to timeout with the first element being a connect timeout (the time it allows for the client to establish a connection to the server), and the second being a read timeout (the time it will wait on a response once your client has established a connection):

>>> requests.get('https://api.github.com', timeout=(2, 5))
<Response [200]>

import requests
from requests.exceptions import Timeout

try:
    response = requests.get('https://api.github.com', timeout=1)
except Timeout:
    print('The request timed out')
else:
    print('The request did not time out')
	
	
The Session Object
=================================================================
- Until now, you’ve been dealing with high level requests APIs such as get() and post(). 
- These functions are abstractions of what’s going on when you make your requests. 
- They hide implementation details such as how connections are managed so that you don’t have to worry about them.

- Underneath those abstractions is a class called Session. If you need to fine-tune your control over how requests are being made or improve the performance of your requests, you may need to use a Session instance directly.

Sessions are used to persist parameters across requests. For example, if you want to use the same authentication across multiple requests, you could use a session:

import requests
from getpass import getpass

# By using a context manager, you can ensure the resources used by
# the session will be released after use
with requests.Session() as session:
    session.auth = ('username', getpass())

    # Instead of requests.get(), you'll use session.get()
    response = session.get('https://api.github.com/user')

# You can inspect the response just like you did before
print(response.headers)
print(response.json())


- Each time you make a request with session, once it has been initialized with authentication credentials, the credentials will be persisted.

Max Retries
==================================================================
- When a request fails, you may want your application to retry the same request. 
- However, requests will not do this for you by default. 
- To apply this functionality, you need to implement a custom Transport Adapter.

For example, let’s say you want all requests to https://api.github.com to retry three times before finally raising a ConnectionError. You would build a Transport Adapter, set its max_retries parameter, and mount it to an existing Session:

import requests
from requests.adapters import HTTPAdapter
from requests.exceptions import ConnectionError

github_adapter = HTTPAdapter(max_retries=3)

session = requests.Session()

# Use `github_adapter` for all requests to endpoints that start with this URL
session.mount('https://api.github.com', github_adapter)

try:
    session.get('https://api.github.com')
except ConnectionError as ce:
    print(ce)
	
	
When you mount the HTTPAdapter, github_adapter, to session, session will adhere to its configuration for each request to https://api.github.com.


